{"version":3,"file":"static/js/664.2d9c7a83.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/Yup.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.scss?6b75","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactListItem/ContactListItem.module.scss?430e","components/ContactListItem/ContactListItem.jsx","webpack://react-homework-template/./src/components/ContactListIsEmpty/ContactListIsEmpty.module.scss?85c8","components/ContactListIsEmpty/ContactListIsEmpty.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.scss?e1a7","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactFilter/ContactFilter.module.scss?3758","components/ContactFilter/ContactFilter.jsx","components/Loader/Loader.jsx","webpack://react-homework-template/./src/components/Phonebook/Phonebook.module.scss?b1f8","components/Phonebook/Phonebook.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\n\nexport const visibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import * as yup from 'yup';\n\nexport const userSchema = yup.object().shape({\n  name: yup\n    .string()\n    .required()\n    .trim()\n    .max(20, 'must be max 20 characters long')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces.'\n    ),\n  number: yup\n    .string()\n    .required()\n    .trim()\n    .max(20, 'must be max 20 characters long')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__zqkUM\"};","import Button from '@mui/material/Button';\nimport AddIcon from '@mui/icons-material/Add';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { getContacts } from 'redux/selectors';\nimport { Formik, Form, Field } from 'formik';\nimport { userSchema } from './Yup';\n\nimport styles from './ContactForm.module.scss';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (\n      contacts.find(el => el.name.toLowerCase() === values.name.toLowerCase())\n    ) {\n      return Notify.failure(`${values.name} is already in contacts`);\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={userSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form className={styles.form}>\n        <label>\n          <p>Name</p>\n          <Field type=\"text\" name=\"name\" />\n        </label>\n        <label>\n          <p>Number</p>\n          <Field type=\"tel\" name=\"number\" />\n        </label>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          size=\"small\"\n          sx={{\n            backgroundColor: '#4caf50',\n            '&:hover': { backgroundColor: '#29972c' },\n          }}\n          startIcon={<AddIcon />}\n        >\n          Add contact\n        </Button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactListItem_contactItem__pXP8s\"};","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport PropTypes from 'prop-types';\n\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport styles from './ContactListItem.module.scss';\n\nexport const ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li key={id} className={styles.contactItem}>\n      {name}: {number}\n      <IconButton\n        aria-label=\"delete\"\n        onClick={() => dispatch(deleteContact(id))}\n      >\n        <DeleteIcon sx={{ fill: '#dd2c00' }} />\n      </IconButton>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"listIsEmpty\":\"ContactListIsEmpty_listIsEmpty__FQc2y\"};","import styles from './ContactListIsEmpty.module.scss';\n\nexport const ContactListIsEmpty = () => {\n  return (\n    <p className={styles.listIsEmpty}>\n      Contacts list is empty! Add contacts and it they appear here.\n    </p>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactListContainer\":\"ContactList_contactListContainer__VIGnh\",\"contactList\":\"ContactList_contactList__lfyFV\",\"scrollbar\":\"ContactList_scrollbar__hUgEU\"};","import { useSelector } from 'react-redux';\nimport { visibleContacts } from 'redux/selectors';\n\nimport { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { ContactListIsEmpty } from 'components/ContactListIsEmpty/ContactListIsEmpty';\n\nimport styles from './ContactList.module.scss';\n\nconst ContactList = () => {\n  const contacts = useSelector(visibleContacts);\n\n  return (\n    <div className={styles.contactListContainer}>\n      <ul\n        className={`${styles.contactList} ${\n          contacts.length > 1 ? styles.scrollbar : ''\n        }`}\n      >\n        {contacts.length === 0 ? (\n          <ContactListIsEmpty />\n        ) : (\n          contacts.map(({ id, name, number }) => (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          ))\n        )}\n      </ul>\n    </div>\n  );\n};\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterTitle\":\"ContactFilter_filterTitle__CI44y\",\"filterInput\":\"ContactFilter_filterInput__VDle2\"};","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filtersSlice';\n\nimport styles from './ContactFilter.module.scss';\n\nconst ContactFilter = () => {\n  const dispatch = useDispatch();\n\n  const changeFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  return (\n    <label className={styles.filterTitle}>\n      Find contacts by name\n      <input\n        className={styles.filterInput}\n        onChange={changeFilter}\n        type=\"text\"\n        name=\"filter\"\n      ></input>\n    </label>\n  );\n};\nexport default ContactFilter;\n","import { ColorRing } from 'react-loader-spinner';\n\nconst Loader = () => {\n  return (\n    <ColorRing\n      visible={true}\n      height=\"50\"\n      width=\"50\"\n      ariaLabel=\"blocks-loading\"\n      wrapperStyle={{\n        display: 'flex',\n        margin: '0 auto',\n      }}\n      wrapperClass=\"blocks-wrapper\"\n      colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n    />\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Phonebook_container__roRy3\",\"containerBcg\":\"Phonebook_containerBcg__omFaD\",\"contactBook\":\"Phonebook_contactBook__64jGc\",\"title\":\"Phonebook_title__mhwvS\",\"subTitle\":\"Phonebook_subTitle__dTrA2\",\"noContact\":\"Phonebook_noContact__03tbE\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport { getError, getIsLoading } from 'redux/selectors';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport ContactFilter from 'components/ContactFilter/ContactFilter';\nimport Loader from 'components/Loader/Loader';\n\nimport styles from './Phonebook.module.scss';\n\nconst Phonebook = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.containerBcg}>\n        <div className={styles.contactBook}>\n          <h1 className={styles.title}>Phonebook</h1>\n          <ContactForm />\n          <h2 className={styles.subTitle}>Contacts</h2>\n          <ContactFilter />\n          {isLoading && !error && <Loader />}\n          <ContactList />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Phonebook;\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","visibleContacts","createSelector","filter","normalizedFilter","toLowerCase","contact","name","includes","userSchema","yup","shape","required","trim","max","matches","number","initialValues","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","resetForm","find","el","Notify","addContact","className","styles","type","Button","variant","size","sx","backgroundColor","startIcon","Add","ContactListItem","id","IconButton","onClick","deleteContact","Delete","fill","ContactListIsEmpty","length","map","onChange","target","setFilter","value","visible","height","width","ariaLabel","wrapperStyle","display","margin","wrapperClass","colors","useEffect","fetchContacts"],"sourceRoot":""}
{"version":3,"file":"static/js/148.8499ef77.chunk.js","mappings":"8PAUA,EARuBA,EAAAA,GACb,CACNC,KAAMD,EAAAA,KAAaE,IAAI,GAAGC,WAAWC,OACrCC,MAAOL,EAAAA,KAAaK,QAAQF,WAAWC,OACvCE,SAAUN,EAAAA,KAAaE,IAAI,GAAGC,WAAWC,SAE1CD,W,UC0CH,EA3CqB,WACnB,IAAMI,GAAWC,EAAAA,EAAAA,MACjB,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYC,KALtBC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OASf,OACE,4BACE,2CACA,kBAAME,SAAUJ,GARH,SAAAK,GACfZ,GAASa,EAAAA,EAAAA,IAAaD,IACtBJ,GACD,IAK2CM,aAAa,MAArD,WACE,8BACE,4BAAWR,EAAS,WACpB,uCACCG,EAAOf,OAAQ,uBAAIe,EAAOf,KAAKqB,cAElC,8BACE,4BAAWT,EAAS,YACpB,oCACCG,EAAOX,QAAS,uBAAIW,EAAOX,MAAMiB,cAEpC,8BACE,4BAAWT,EAAS,eACpB,uCACCG,EAAOV,WAAY,uBAAIU,EAAOV,SAASgB,cAE1C,mBAAQC,KAAK,SAAb,uBACA,iDACmB,SAAC,KAAD,CAASC,GAAG,SAAZ,2BAK1B,E,UC7BD,EAfqB,WACnB,OACE,gBAAKC,UAAWC,EAAAA,EAAAA,UAAhB,UACE,gBAAKD,UAAWC,EAAAA,EAAAA,aAAhB,UACE,iBAAKD,UAAWC,EAAAA,EAAAA,YAAhB,WACE,eAAID,UAAWC,EAAAA,EAAAA,MAAf,wBACA,gBAAKD,UAAWC,EAAAA,EAAAA,cAAhB,UACE,SAAC,EAAD,YAMX,C,qBChBD,KAAgB,UAAY,0BAA0B,aAAe,6BAA6B,YAAc,4BAA4B,cAAgB,8BAA8B,MAAQ,sBAAsB,SAAW,yB","sources":["components/RegisterForm/Yup.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx","webpack://react-homework-template/./src/pages/styles.module.scss?36b5"],"sourcesContent":["import * as yup from 'yup';\n\nconst registerSchema = yup\n  .object({\n    name: yup.string().min(3).required().trim(),\n    email: yup.string().email().required().trim(),\n    password: yup.string().min(5).required().trim(),\n  })\n  .required();\n\nexport default registerSchema;\n","import { useDispatch } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { registration } from 'redux/auth/operations';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport registerSchema from './Yup';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(registerSchema),\n  });\n  const onSubmit = data => {\n    dispatch(registration(data));\n    reset();\n  };\n\n  return (\n    <div>\n      <h2>Register Here</h2>\n      <form onSubmit={handleSubmit(onSubmit)} autoComplete=\"off\">\n        <label>\n          <input {...register('name')} />\n          <span>Username</span>\n          {errors.name && <p>{errors.name.message}</p>}\n        </label>\n        <label>\n          <input {...register('email')} />\n          <span>Email</span>\n          {errors.email && <p>{errors.email.message}</p>}\n        </label>\n        <label>\n          <input {...register('password')} />\n          <span>Password</span>\n          {errors.password && <p>{errors.password.message}</p>}\n        </label>\n        <button type=\"submit\">Register</button>\n        <span>\n          Have an account? <NavLink to=\"/login\">LogIn</NavLink>\n        </span>\n      </form>\n    </div>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nimport styles from './styles.module.scss';\n\nconst RegisterPage = () => {\n  return (\n    <div className={styles.container}>\n      <div className={styles.containerBcg}>\n        <div className={styles.contactBook}>\n          <h1 className={styles.title}>Phonebook</h1>\n          <div className={styles.mainContainer}>\n            <RegisterForm />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"styles_container__9djz6\",\"containerBcg\":\"styles_containerBcg__yX6Rx\",\"contactBook\":\"styles_contactBook__m5VYB\",\"mainContainer\":\"styles_mainContainer__Df3Wm\",\"title\":\"styles_title__1mzka\",\"subTitle\":\"styles_subTitle__VPDln\"};"],"names":["yup","name","min","required","trim","email","password","dispatch","useDispatch","useForm","resolver","yupResolver","registerSchema","register","handleSubmit","reset","errors","formState","onSubmit","data","registration","autoComplete","message","type","to","className","styles"],"sourceRoot":""}